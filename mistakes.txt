Day 1:
- Not using an IDE
- `import utils` instead of `from utils import *`

Day2:
- Bug in submit script: level should be part, not day (didn't catch it since I only tested on 2018 part 1 day 1)

Day3:
- Not expecting there to be a trailing newline on each line; messing up my `% len(line)` calculation
- Transposing my x and y coords for the slopes in part 2

Day 4:
- Incorrectly truncating the last record
- Forgetting to actually return something from a function
- Mistyping 260 as 280 in the submission field
- Putting [:-2] in the wrong place when validating inches
- Not making my strings with \ in them raw (thanks vscode)
- Not wrapping my regexes with ^ and $ [edit: or using re.fullmatch]

Day 5:
- Trying to fiddle around with my submit function cost me a lot more time than just copying it to my browser would

Day 6:
- Coutning the set of words rather than the set of letters (wrong submission)
- Traling newline in final group messing up count for part 2 (interpreted as an extra person answering no questions) (ws)

Day 7:
- Skipped the start time due to not being able to get enough sleep
- Something didn't work at first (producing 0) and I don't know what I changed that made it work again (edit: I believe I missed a return statement making a function always return none)
- Included the shily gold bag in the result (wrong submission - off by one)
- Thought that I had misunderstood the question and it wanted unqualified colours (e.g. just 'orange') instead of things like 'dim orange' but I in fact had it right the first time (ws)
- Included my own bag in the total count of bags again, leading to off-by-one (ws)

Day 8:
- None!!!

Day 9:
- Using the first 25 numbers rather than the previous 25
- Printing too much debugging info that the right answer got burried in it without me realising (thinking I hadn't produced the answer)
- Issue in a util function caused incorrect result on example input
- Thinking that getting 2 results for part 2 was a problem (one of them was the singleton range of the number itself)
- Using the endpoints of the range rather than its maximum and minimum values (ws)

Day 10:
- Not adding an extra 3 to the differences (ws)
- Not including the base outlet of 0 in the differences calculation (ws)
- Counting up to len(nums) rather than max(nums) (ws)
- Printing (and submitting) the value for len(nums) rather than the last one (ws)

Day 11:
- Missing the return statement in my count function (this happened on both parts)
- += instead of = (ws)

Day 12:
- Allowing my phone (with my alarm on it) to run out of battery
- Forgetting to multiply by the magnitude of each instruction (effectively treating it as 1 always) (ws)
- Adding to my direction instead of rotating it (multiplying it) (ws)
- Forgetting to take absolute value when calculating manhatten distance (ws)
- Mistyping ** as *

Day 13:
- Not testing on the test input sooner (as well as the test output)
- When switching to test input, still using the product calculated from the real input
- Wrong inputs to CRT (didn't negate my modulus) (ws)

Day 14:
- Spending a long time trying to think of a way to not have to iterate over 2^(number of Xs) without checking that max number of Xs is actually small 
- Misreading part 2 and using an & instead of an |
- Not setting the X bits to 0 before |-ing in the floating bits 

Day 15:
- A few inacuracies in translating from the list based solution to the timestamp table based solution such as an off by one error
- Running out of memory in vscode, and thinking that the puzzle was to find a better solution than the timestamp table one
- Running the full expensive computation on test data rather than the real input 
- Not realising that the entire time the bottleneck was printing so much debugging info (one line per number outputted) and that it could have run efficiently on my normal machine 

Day 16:
- Checking whether a number is valid for any rule rather than for all rules (ws)
- Submitting the sum rather than the product of the final fields determined (ws)
- Truncating the first rule (ws)
- Making a compicated algorithm to search for a legal set of positions since there wasn't an obvious unique one for my truncated input

Day 17:
- Not adding 1 to my bounds for the next grid
- Missing adding a w in a few places

Day 18:
- Evaluating right to left (ws)
- Writing a parser in the first place

Day 19:
- Misinterpreting the 11 rule
- Trying for a very long time to make the 11 rule work in full generality by inspecting the capture groups after the match